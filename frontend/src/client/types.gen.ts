// This file is auto-generated by @hey-api/openapi-ts

export type Body_documents_create_document = {
  file: Blob | File
}

export type Body_login_login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type DocumentPublic = {
  filename: string
  s3_url?: string | null
  s3_key?: string | null
  content_type?: string | null
  size?: number | null
  id: string
  owner_id: string
  extracted_text?: string | null
}

export type DocumentsPublic = {
  data: Array<DocumentPublic>
  count: number
}

export type DocumentUpdate = {
  filename?: string | null
  s3_url?: string | null
  s3_key?: string | null
  content_type?: string | null
  size?: number | null
}

export type GenerateQuestionsRequest = {
  document_ids: Array<string>
}

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type Message = {
  message: string
}

export type NewPassword = {
  token: string
  new_password: string
}

export type PrivateUserCreate = {
  email: string
  password: string
  full_name: string
  is_verified?: boolean
}

export type Question = {
  question?: string | null
  answer?: string | null
  id?: string
  owner_id: string
}

export type Token = {
  access_token: string
  token_type?: string
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password: string
}

export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  id: string
}

export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password?: string | null
}

export type UserUpdateMe = {
  full_name?: string | null
  email?: string | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type DocumentsCreateDocumentData = {
  formData: Body_documents_create_document
}

export type DocumentsCreateDocumentResponse = DocumentPublic

export type DocumentsReadDocumentsData = {
  limit?: number
  skip?: number
}

export type DocumentsReadDocumentsResponse = DocumentsPublic

export type DocumentsReadDocumentData = {
  id: string
}

export type DocumentsReadDocumentResponse = DocumentPublic

export type DocumentsUpdateDocumentData = {
  id: string
  requestBody: DocumentUpdate
}

export type DocumentsUpdateDocumentResponse = DocumentPublic

export type DocumentsDeleteDocumentData = {
  id: string
}

export type DocumentsDeleteDocumentResponse = Message

export type LoginLoginAccessTokenData = {
  formData: Body_login_login_access_token
}

export type LoginLoginAccessTokenResponse = Token

export type LoginTestTokenResponse = UserPublic

export type LoginRecoverPasswordData = {
  email: string
}

export type LoginRecoverPasswordResponse = Message

export type LoginResetPasswordData = {
  requestBody: NewPassword
}

export type LoginResetPasswordResponse = Message

export type LoginRecoverPasswordHtmlContentData = {
  email: string
}

export type LoginRecoverPasswordHtmlContentResponse = string

export type PrivateCreateUserData = {
  requestBody: PrivateUserCreate
}

export type PrivateCreateUserResponse = UserPublic

export type QuestionsGenerateQuestionsData = {
  requestBody: GenerateQuestionsRequest
}

export type QuestionsGenerateQuestionsResponse = Array<Question>

export type UsersReadUsersData = {
  limit?: number
  skip?: number
}

export type UsersReadUsersResponse = UsersPublic

export type UsersCreateUserData = {
  requestBody: UserCreate
}

export type UsersCreateUserResponse = UserPublic

export type UsersReadUserMeResponse = UserPublic

export type UsersDeleteUserMeResponse = Message

export type UsersUpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UsersUpdateUserMeResponse = UserPublic

export type UsersUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UsersUpdatePasswordMeResponse = Message

export type UsersRegisterUserData = {
  requestBody: UserRegister
}

export type UsersRegisterUserResponse = UserPublic

export type UsersReadUserByIdData = {
  userId: string
}

export type UsersReadUserByIdResponse = UserPublic

export type UsersUpdateUserData = {
  requestBody: UserUpdate
  userId: string
}

export type UsersUpdateUserResponse = UserPublic

export type UsersDeleteUserData = {
  userId: string
}

export type UsersDeleteUserResponse = Message

export type UtilsTestEmailData = {
  emailTo: string
}

export type UtilsTestEmailResponse = Message

export type UtilsHealthCheckResponse = boolean
