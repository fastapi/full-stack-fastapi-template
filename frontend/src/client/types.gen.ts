// This file is auto-generated by @hey-api/openapi-ts

export type AISoulEntity = {
    name: string;
    description?: (string | null);
    persona_type: string;
    specializations: string;
    base_prompt: string;
    is_active?: boolean;
    id?: string;
    user_id: string;
    created_at?: string;
    updated_at?: string;
    last_used?: (string | null);
    interaction_count?: number;
};

export type AISoulEntityCreate = {
    name: string;
    description?: (string | null);
    persona_type: string;
    specializations: string;
    base_prompt?: (string | null);
};

export type AISoulEntityPublic = {
    name: string;
    description?: (string | null);
    persona_type: string;
    specializations: string;
    base_prompt: string;
    is_active?: boolean;
    id: string;
    user_id: string;
    created_at: string;
    updated_at: string;
    last_used: (string | null);
    interaction_count: number;
};

export type AISoulEntityUpdate = {
    name?: (string | null);
    description?: (string | null);
    persona_type?: (string | null);
    specializations?: (string | null);
    base_prompt?: (string | null);
    is_active?: (boolean | null);
};

/**
 * AI Soul Entity with user-specific interaction count for role-based responses
 */
export type AISoulEntityWithUserInteraction = {
    name: string;
    description?: (string | null);
    persona_type: string;
    specializations: string;
    base_prompt: string;
    is_active?: boolean;
    id: string;
    user_id: string;
    created_at: string;
    updated_at: string;
    last_used: (string | null);
    interaction_count: number;
};

export type ApproveResponseRequest = {
    notes?: (string | null);
};

export type Body_documents_search_documents = {
    query: string;
    limit?: number;
};

export type Body_documents_upload_document = {
    file: (Blob | File);
    description?: (string | null);
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type Body_training_upload_training_document = {
    file: (Blob | File);
    description?: string;
};

export type ChatMessageCreate = {
    content: string;
};

/**
 * Response model for chat message creation containing both user and AI messages
 */
export type ChatMessagePairResponse = {
    user_message: ChatMessagePublic;
    ai_message: ChatMessagePublic;
};

export type ChatMessagePublic = {
    content: string;
    id: string;
    user_id: string;
    ai_soul_id: string;
    is_from_user: boolean;
    timestamp: string;
    is_temporary?: boolean;
};

/**
 * Click tracking request model.
 */
export type ClickTrackingRequest = {
    search_query_id: string;
    chunk_id: string;
    result_position: number;
    similarity_score: number;
    rerank_score?: (number | null);
};

/**
 * RAG configuration request model.
 */
export type ConfigurationRequest = {
    ai_soul_id?: (string | null);
    chunking_strategy?: string;
    chunk_size?: number;
    chunk_overlap?: number;
    embedding_model?: string;
    search_algorithm?: string;
    similarity_threshold?: number;
    max_results?: number;
    enable_reranking?: boolean;
};

export type CounselorQueueResponse = {
    queue_items: Array<{
        [key: string]: unknown;
    }>;
    total_count: number;
    urgent_count: number;
    high_priority_count: number;
};

export type DocumentPublic = {
    filename: string;
    original_filename: string;
    file_size: number;
    content_type: string;
    description?: (string | null);
    id: string;
    user_id: string;
    upload_timestamp: string;
    processing_status: string;
    chunk_count: number;
};

export type DocumentsPublic = {
    data: Array<DocumentPublic>;
    count: number;
};

export type EscalateRequestRequest = {
    escalation_reason: string;
    target_counselor_id?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
};

export type ItemPublic = {
    title: string;
    description?: (string | null);
    id: string;
    owner_id: string;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
};

export type Message = {
    message: string;
};

export type ModifyResponseRequest = {
    modified_response: string;
    notes?: (string | null);
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PerformanceMetricsResponse = {
    counselor_id: string;
    period_days: number;
    total_cases_reviewed: number;
    approvals: number;
    modifications: number;
    rejections: number;
    escalations: number;
    approval_rate: number;
    average_review_time_seconds: number;
    current_queue_size: number;
    cases_per_day: number;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

/**
 * Document processing request model.
 */
export type ProcessDocumentRequest = {
    /**
     * Document ID to process
     */
    document_id: string;
    /**
     * Chunking strategy
     */
    chunking_strategy?: (string | null);
    /**
     * Chunk size
     */
    chunk_size?: (number | null);
    /**
     * Chunk overlap
     */
    chunk_overlap?: (number | null);
    /**
     * Embedding model
     */
    embedding_model?: (string | null);
};

/**
 * Document processing response model.
 */
export type ProcessDocumentResponse = {
    status: string;
    chunks_created: number;
    processing_time_ms: number;
    embedding_model: string;
    chunking_strategy: string;
};

export type RejectResponseRequest = {
    replacement_response: string;
    reason: string;
};

/**
 * Search request model.
 */
export type SearchRequest = {
    /**
     * Search query
     */
    query: string;
    /**
     * AI Soul ID for filtering
     */
    ai_soul_id?: (string | null);
    /**
     * Additional search filters
     */
    filters?: ({
    [key: string]: unknown;
} | null);
    /**
     * Maximum number of results
     */
    limit?: number;
};

/**
 * Search response model.
 */
export type SearchResponse = {
    query: string;
    results: Array<{
        [key: string]: unknown;
    }>;
    total_found: number;
    response_time_ms: number;
    search_algorithm: string;
    similarity_threshold: number;
    reranking_enabled: boolean;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type TrainingDocumentPublic = {
    filename: string;
    original_filename: string;
    file_size: number;
    content_type: string;
    description?: (string | null);
    id: string;
    ai_soul_id: string;
    user_id: string;
    upload_timestamp: string;
    processing_status: string;
    chunk_count: number;
};

export type TrainingMessageCreate = {
    content: string;
    is_from_trainer?: boolean;
};

export type TrainingMessagePublic = {
    content: string;
    is_from_trainer?: boolean;
    id: string;
    ai_soul_id: string;
    user_id: string;
    timestamp: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
    role?: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
    role: string;
    created_at: string;
    updated_at: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
    role?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type AiSoulsCreateAiSoulData = {
    requestBody: AISoulEntityCreate;
};

export type AiSoulsCreateAiSoulResponse = (AISoulEntityPublic);

export type AiSoulsGetAiSoulsData = {
    limit?: number;
    skip?: number;
};

export type AiSoulsGetAiSoulsResponse = (Array<AISoulEntityWithUserInteraction>);

export type AiSoulsGetAiSoulData = {
    aiSoulId: string;
};

export type AiSoulsGetAiSoulResponse = (AISoulEntityWithUserInteraction);

export type AiSoulsUpdateAiSoulData = {
    aiSoulId: string;
    requestBody: AISoulEntityUpdate;
};

export type AiSoulsUpdateAiSoulResponse = (AISoulEntity);

export type AiSoulsDeleteAiSoulData = {
    aiSoulId: string;
};

export type AiSoulsDeleteAiSoulResponse = (unknown);

export type ChatCreateChatMessageData = {
    aiSoulId: string;
    requestBody: ChatMessageCreate;
};

export type ChatCreateChatMessageResponse = (ChatMessagePairResponse);

export type ChatGetChatMessagesData = {
    aiSoulId: string;
    limit?: number;
    skip?: number;
};

export type ChatGetChatMessagesResponse = (Array<ChatMessagePublic>);

export type ChatDeleteChatMessagesData = {
    aiSoulId: string;
};

export type ChatDeleteChatMessagesResponse = (unknown);

export type CounselorGetCounselorQueueData = {
    /**
     * Maximum number of items
     */
    limit?: number;
    /**
     * Status filter
     */
    status?: string;
};

export type CounselorGetCounselorQueueResponse = (CounselorQueueResponse);

export type CounselorGetOrganizationQueueData = {
    /**
     * Maximum number of items
     */
    limit?: number;
    /**
     * Priority filter
     */
    priority?: (string | null);
    /**
     * Status filter
     */
    status?: string;
};

export type CounselorGetOrganizationQueueResponse = ({
    [key: string]: unknown;
});

export type CounselorApproveResponseData = {
    pendingResponseId: string;
    requestBody: ApproveResponseRequest;
};

export type CounselorApproveResponseResponse = ({
    [key: string]: unknown;
});

export type CounselorModifyResponseData = {
    pendingResponseId: string;
    requestBody: ModifyResponseRequest;
};

export type CounselorModifyResponseResponse = ({
    [key: string]: unknown;
});

export type CounselorRejectResponseData = {
    pendingResponseId: string;
    requestBody: RejectResponseRequest;
};

export type CounselorRejectResponseResponse = ({
    [key: string]: unknown;
});

export type CounselorEscalateCaseData = {
    pendingResponseId: string;
    requestBody: EscalateRequestRequest;
};

export type CounselorEscalateCaseResponse = ({
    [key: string]: unknown;
});

export type CounselorGetCounselorPerformanceData = {
    /**
     * Number of days to analyze
     */
    days?: number;
};

export type CounselorGetCounselorPerformanceResponse = (PerformanceMetricsResponse);

export type CounselorGetRecentRiskAssessmentsData = {
    /**
     * Number of days to look back
     */
    days?: number;
    /**
     * Maximum number of assessments
     */
    limit?: number;
};

export type CounselorGetRecentRiskAssessmentsResponse = ({
    [key: string]: unknown;
});

export type CounselorGetHighRiskConversationsData = {
    /**
     * Number of hours to look back
     */
    hours?: number;
};

export type CounselorGetHighRiskConversationsResponse = ({
    [key: string]: unknown;
});

export type CounselorAutoApproveExpiredResponsesResponse = ({
    [key: string]: unknown;
});

export type CounselorListCounselorsData = {
    /**
     * Filter by organization
     */
    organizationId?: (string | null);
};

export type CounselorListCounselorsResponse = ({
    [key: string]: unknown;
});

export type UntaggedHealthCheckResponse = ({
    [key: string]: unknown;
});

export type UntaggedCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type UntaggedCreateUserResponse = (UserPublic);

export type DocumentsUploadDocumentData = {
    formData: Body_documents_upload_document;
};

export type DocumentsUploadDocumentResponse = (DocumentPublic);

export type DocumentsGetDocumentsData = {
    limit?: number;
    skip?: number;
};

export type DocumentsGetDocumentsResponse = (DocumentsPublic);

export type DocumentsDeleteDocumentData = {
    documentId: string;
};

export type DocumentsDeleteDocumentResponse = ({
    [key: string]: unknown;
});

export type DocumentsGetDocumentData = {
    documentId: string;
};

export type DocumentsGetDocumentResponse = (DocumentPublic);

export type DocumentsSearchDocumentsData = {
    formData: Body_documents_search_documents;
};

export type DocumentsSearchDocumentsResponse = (unknown);

export type DocumentsGetDocumentStatsResponse = (unknown);

export type EnhancedRagSearchDocumentsData = {
    requestBody: SearchRequest;
};

export type EnhancedRagSearchDocumentsResponse = (SearchResponse);

export type EnhancedRagProcessDocumentData = {
    requestBody: ProcessDocumentRequest;
};

export type EnhancedRagProcessDocumentResponse = (ProcessDocumentResponse);

export type EnhancedRagReindexDocumentData = {
    documentId: string;
};

export type EnhancedRagReindexDocumentResponse = (unknown);

export type EnhancedRagDeleteDocumentIndexData = {
    documentId: string;
};

export type EnhancedRagDeleteDocumentIndexResponse = (unknown);

export type EnhancedRagTrackResultClickData = {
    requestBody: ClickTrackingRequest;
};

export type EnhancedRagTrackResultClickResponse = (unknown);

export type EnhancedRagGetSearchAnalyticsData = {
    /**
     * Number of days to analyze
     */
    days?: number;
};

export type EnhancedRagGetSearchAnalyticsResponse = (unknown);

export type EnhancedRagGetRagConfigurationData = {
    /**
     * AI Soul ID
     */
    aiSoulId?: (string | null);
};

export type EnhancedRagGetRagConfigurationResponse = (unknown);

export type EnhancedRagUpdateRagConfigurationData = {
    requestBody: ConfigurationRequest;
};

export type EnhancedRagUpdateRagConfigurationResponse = (unknown);

export type EnhancedRagHealthCheckResponse = (unknown);

export type EnhancedRagGetCollectionInfoResponse = (unknown);

export type EnhancedRagGetSearchSuggestionsData = {
    limit?: number;
    query: string;
};

export type EnhancedRagGetSearchSuggestionsResponse = (unknown);

export type EnhancedRagBulkProcessDocumentsData = {
    chunkingStrategy?: string;
    requestBody: Array<(string)>;
};

export type EnhancedRagBulkProcessDocumentsResponse = (unknown);

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (Message);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type TrainingSendTrainingMessageData = {
    aiSoulId: string;
    requestBody: TrainingMessageCreate;
};

export type TrainingSendTrainingMessageResponse = (TrainingMessagePublic);

export type TrainingGetTrainingMessagesData = {
    aiSoulId: string;
    limit?: number;
    skip?: number;
};

export type TrainingGetTrainingMessagesResponse = (Array<TrainingMessagePublic>);

export type TrainingUploadTrainingDocumentData = {
    aiSoulId: string;
    formData: Body_training_upload_training_document;
};

export type TrainingUploadTrainingDocumentResponse = (TrainingDocumentPublic);

export type TrainingGetTrainingDocumentsData = {
    aiSoulId: string;
    limit?: number;
    skip?: number;
};

export type TrainingGetTrainingDocumentsResponse = (Array<TrainingDocumentPublic>);

export type TrainingDeleteTrainingDocumentData = {
    aiSoulId: string;
    documentId: string;
};

export type TrainingDeleteTrainingDocumentResponse = (unknown);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsHealthCheckResponse = ({
    [key: string]: unknown;
});

export type UtilsGetSystemHealthResponse = ({
    [key: string]: unknown;
});