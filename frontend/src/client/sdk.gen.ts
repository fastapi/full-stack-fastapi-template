// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AiSoulsCreateAiSoulData, AiSoulsCreateAiSoulResponse, AiSoulsGetAiSoulsData, AiSoulsGetAiSoulsResponse, AiSoulsGetAiSoulData, AiSoulsGetAiSoulResponse, AiSoulsUpdateAiSoulData, AiSoulsUpdateAiSoulResponse, AiSoulsDeleteAiSoulData, AiSoulsDeleteAiSoulResponse, ChatCreateChatMessageData, ChatCreateChatMessageResponse, ChatGetChatMessagesData, ChatGetChatMessagesResponse, ChatDeleteChatMessagesData, ChatDeleteChatMessagesResponse, CounselorGetCounselorQueueData, CounselorGetCounselorQueueResponse, CounselorGetOrganizationQueueData, CounselorGetOrganizationQueueResponse, CounselorApproveResponseData, CounselorApproveResponseResponse, CounselorModifyResponseData, CounselorModifyResponseResponse, CounselorRejectResponseData, CounselorRejectResponseResponse, CounselorEscalateCaseData, CounselorEscalateCaseResponse, CounselorGetCounselorPerformanceData, CounselorGetCounselorPerformanceResponse, CounselorGetRecentRiskAssessmentsData, CounselorGetRecentRiskAssessmentsResponse, CounselorGetHighRiskConversationsData, CounselorGetHighRiskConversationsResponse, CounselorAutoApproveExpiredResponsesResponse, CounselorListCounselorsData, CounselorListCounselorsResponse, UntaggedHealthCheckResponse, UntaggedCreateUserData, UntaggedCreateUserResponse, DocumentsUploadDocumentData, DocumentsUploadDocumentResponse, DocumentsGetDocumentsData, DocumentsGetDocumentsResponse, DocumentsDeleteDocumentData, DocumentsDeleteDocumentResponse, DocumentsGetDocumentData, DocumentsGetDocumentResponse, DocumentsSearchDocumentsData, DocumentsSearchDocumentsResponse, DocumentsGetDocumentStatsResponse, EnhancedRagSearchDocumentsData, EnhancedRagSearchDocumentsResponse, EnhancedRagProcessDocumentData, EnhancedRagProcessDocumentResponse, EnhancedRagReindexDocumentData, EnhancedRagReindexDocumentResponse, EnhancedRagDeleteDocumentIndexData, EnhancedRagDeleteDocumentIndexResponse, EnhancedRagTrackResultClickData, EnhancedRagTrackResultClickResponse, EnhancedRagGetSearchAnalyticsData, EnhancedRagGetSearchAnalyticsResponse, EnhancedRagGetRagConfigurationData, EnhancedRagGetRagConfigurationResponse, EnhancedRagUpdateRagConfigurationData, EnhancedRagUpdateRagConfigurationResponse, EnhancedRagHealthCheckResponse, EnhancedRagGetCollectionInfoResponse, EnhancedRagGetSearchSuggestionsData, EnhancedRagGetSearchSuggestionsResponse, EnhancedRagBulkProcessDocumentsData, EnhancedRagBulkProcessDocumentsResponse, ItemsReadItemsData, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, PrivateCreateUserData, PrivateCreateUserResponse, TrainingSendTrainingMessageData, TrainingSendTrainingMessageResponse, TrainingGetTrainingMessagesData, TrainingGetTrainingMessagesResponse, TrainingUploadTrainingDocumentData, TrainingUploadTrainingDocumentResponse, TrainingGetTrainingDocumentsData, TrainingGetTrainingDocumentsResponse, TrainingDeleteTrainingDocumentData, TrainingDeleteTrainingDocumentResponse, UsersReadUsersData, UsersReadUsersResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsHealthCheckResponse, UtilsGetSystemHealthResponse } from './types.gen';

export class AiSoulsService {
    /**
     * Create Ai Soul
     * Create a new AI soul.
     * Only trainers and admins can create souls.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AISoulEntityPublic Successful Response
     * @throws ApiError
     */
    public static createAiSoul(data: AiSoulsCreateAiSoulData): CancelablePromise<AiSoulsCreateAiSoulResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/ai-souls/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Ai Souls
     * Get all AI souls with role-based interaction counts.
     * Regular users see their own interaction counts.
     * Admins and counselors see global interaction counts.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns AISoulEntityWithUserInteraction Successful Response
     * @throws ApiError
     */
    public static getAiSouls(data: AiSoulsGetAiSoulsData = {}): CancelablePromise<AiSoulsGetAiSoulsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ai-souls/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Ai Soul
     * Get a specific AI soul by ID with role-based interaction count.
     * Regular users see their own interaction count.
     * Admins and counselors see global interaction count.
     * @param data The data for the request.
     * @param data.aiSoulId
     * @returns AISoulEntityWithUserInteraction Successful Response
     * @throws ApiError
     */
    public static getAiSoul(data: AiSoulsGetAiSoulData): CancelablePromise<AiSoulsGetAiSoulResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ai-souls/{ai_soul_id}',
            path: {
                ai_soul_id: data.aiSoulId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Ai Soul
     * Update a specific AI soul.
     * Only trainers and admins can update souls.
     * @param data The data for the request.
     * @param data.aiSoulId
     * @param data.requestBody
     * @returns AISoulEntity Successful Response
     * @throws ApiError
     */
    public static updateAiSoul(data: AiSoulsUpdateAiSoulData): CancelablePromise<AiSoulsUpdateAiSoulResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/ai-souls/{ai_soul_id}',
            path: {
                ai_soul_id: data.aiSoulId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Ai Soul
     * Delete a specific AI soul.
     * Only admins can delete souls.
     * @param data The data for the request.
     * @param data.aiSoulId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteAiSoul(data: AiSoulsDeleteAiSoulData): CancelablePromise<AiSoulsDeleteAiSoulResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/ai-souls/{ai_soul_id}',
            path: {
                ai_soul_id: data.aiSoulId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ChatService {
    /**
     * Create Chat Message
     * Create a new chat message and get AI response with counselor override system.
     * Any user can chat with any AI soul.
     * Returns both user message and AI response to prevent message stacking.
     * @param data The data for the request.
     * @param data.aiSoulId
     * @param data.requestBody
     * @returns ChatMessagePairResponse Successful Response
     * @throws ApiError
     */
    public static createChatMessage(data: ChatCreateChatMessageData): CancelablePromise<ChatCreateChatMessageResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/chat/{ai_soul_id}/messages',
            path: {
                ai_soul_id: data.aiSoulId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Chat Messages
     * Get chat messages for a specific AI soul.
     * Users can only see their own chat messages.
     * Messages are returned in ascending order (oldest first).
     * @param data The data for the request.
     * @param data.aiSoulId
     * @param data.skip
     * @param data.limit
     * @returns ChatMessagePublic Successful Response
     * @throws ApiError
     */
    public static getChatMessages(data: ChatGetChatMessagesData): CancelablePromise<ChatGetChatMessagesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/chat/{ai_soul_id}/messages',
            path: {
                ai_soul_id: data.aiSoulId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Chat Messages
     * Delete all chat messages for a specific AI soul.
     * Users can only delete their own chat messages.
     * @param data The data for the request.
     * @param data.aiSoulId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteChatMessages(data: ChatDeleteChatMessagesData): CancelablePromise<ChatDeleteChatMessagesResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/chat/{ai_soul_id}/messages',
            path: {
                ai_soul_id: data.aiSoulId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class CounselorService {
    /**
     * Get Counselor Queue
     * Get the review queue for the current counselor.
     * @param data The data for the request.
     * @param data.status Status filter
     * @param data.limit Maximum number of items
     * @returns CounselorQueueResponse Successful Response
     * @throws ApiError
     */
    public static getCounselorQueue(data: CounselorGetCounselorQueueData = {}): CancelablePromise<CounselorGetCounselorQueueResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/counselor/queue',
            query: {
                status: data.status,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Organization Queue
     * Get the organization-wide review queue (admin/supervisor only).
     * @param data The data for the request.
     * @param data.status Status filter
     * @param data.priority Priority filter
     * @param data.limit Maximum number of items
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getOrganizationQueue(data: CounselorGetOrganizationQueueData = {}): CancelablePromise<CounselorGetOrganizationQueueResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/counselor/organization-queue',
            query: {
                status: data.status,
                priority: data.priority,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Approve Response
     * Approve an AI response without modifications.
     * @param data The data for the request.
     * @param data.pendingResponseId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static approveResponse(data: CounselorApproveResponseData): CancelablePromise<CounselorApproveResponseResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/counselor/{pending_response_id}/approve',
            path: {
                pending_response_id: data.pendingResponseId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Modify Response
     * Modify an AI response before sending to user.
     * @param data The data for the request.
     * @param data.pendingResponseId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static modifyResponse(data: CounselorModifyResponseData): CancelablePromise<CounselorModifyResponseResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/counselor/{pending_response_id}/modify',
            path: {
                pending_response_id: data.pendingResponseId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reject Response
     * Reject an AI response and provide a replacement.
     * @param data The data for the request.
     * @param data.pendingResponseId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static rejectResponse(data: CounselorRejectResponseData): CancelablePromise<CounselorRejectResponseResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/counselor/{pending_response_id}/reject',
            path: {
                pending_response_id: data.pendingResponseId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Escalate Case
     * Escalate a case to another counselor or supervisor.
     * @param data The data for the request.
     * @param data.pendingResponseId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static escalateCase(data: CounselorEscalateCaseData): CancelablePromise<CounselorEscalateCaseResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/counselor/{pending_response_id}/escalate',
            path: {
                pending_response_id: data.pendingResponseId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Counselor Performance
     * Get performance metrics for the current counselor.
     * @param data The data for the request.
     * @param data.days Number of days to analyze
     * @returns PerformanceMetricsResponse Successful Response
     * @throws ApiError
     */
    public static getCounselorPerformance(data: CounselorGetCounselorPerformanceData = {}): CancelablePromise<CounselorGetCounselorPerformanceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/counselor/performance',
            query: {
                days: data.days
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Recent Risk Assessments
     * Get recent risk assessments for monitoring (counselor/admin only).
     * @param data The data for the request.
     * @param data.days Number of days to look back
     * @param data.limit Maximum number of assessments
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getRecentRiskAssessments(data: CounselorGetRecentRiskAssessmentsData = {}): CancelablePromise<CounselorGetRecentRiskAssessmentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/counselor/risk-assessments',
            query: {
                days: data.days,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get High Risk Conversations
     * Get conversations with high risk assessments for immediate attention.
     * @param data The data for the request.
     * @param data.hours Number of hours to look back
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getHighRiskConversations(data: CounselorGetHighRiskConversationsData = {}): CancelablePromise<CounselorGetHighRiskConversationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/counselor/high-risk-conversations',
            query: {
                hours: data.hours
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Auto Approve Expired Responses
     * Manually trigger auto-approval of expired responses (admin only).
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static autoApproveExpiredResponses(): CancelablePromise<CounselorAutoApproveExpiredResponsesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/counselor/auto-approve-expired'
        });
    }
    
    /**
     * List Counselors
     * List all counselors (admin only).
     * @param data The data for the request.
     * @param data.organizationId Filter by organization
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static listCounselors(data: CounselorListCounselorsData = {}): CancelablePromise<CounselorListCounselorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/counselor/counselors',
            query: {
                organization_id: data.organizationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class DefaultService {
    /**
     * Health Check
     * Health check endpoint to verify the service is running.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static untaggedHealthCheck(): CancelablePromise<UntaggedHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/utils/health-check/'
        });
    }
    
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static untaggedCreateUser(data: UntaggedCreateUserData): CancelablePromise<UntaggedCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class DocumentsService {
    /**
     * Upload Document
     * Upload a PDF document for processing.
     * @param data The data for the request.
     * @param data.formData
     * @returns DocumentPublic Successful Response
     * @throws ApiError
     */
    public static uploadDocument(data: DocumentsUploadDocumentData): CancelablePromise<DocumentsUploadDocumentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/documents/upload/',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Documents
     * Retrieve all documents for the current user.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns DocumentsPublic Successful Response
     * @throws ApiError
     */
    public static getDocuments(data: DocumentsGetDocumentsData = {}): CancelablePromise<DocumentsGetDocumentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/documents/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Document
     * Delete a document and its associated file.
     * @param data The data for the request.
     * @param data.documentId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteDocument(data: DocumentsDeleteDocumentData): CancelablePromise<DocumentsDeleteDocumentResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/documents/{document_id}',
            path: {
                document_id: data.documentId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Document
     * Get a specific document by ID.
     * @param data The data for the request.
     * @param data.documentId
     * @returns DocumentPublic Successful Response
     * @throws ApiError
     */
    public static getDocument(data: DocumentsGetDocumentData): CancelablePromise<DocumentsGetDocumentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/documents/{document_id}',
            path: {
                document_id: data.documentId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Search Documents
     * Search through uploaded documents using Enhanced RAG.
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static searchDocuments(data: DocumentsSearchDocumentsData): CancelablePromise<DocumentsSearchDocumentsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/documents/search',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Document Stats
     * Get document statistics for the current user.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getDocumentStats(): CancelablePromise<DocumentsGetDocumentStatsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/documents/stats/summary'
        });
    }
    
}

export class EnhancedRagService {
    /**
     * Search Documents
     * Search documents using enhanced RAG with hybrid retrieval.
     *
     * Features:
     * - Semantic vector search
     * - Keyword matching
     * - Result reranking
     * - Caching for performance
     * - Analytics tracking
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SearchResponse Successful Response
     * @throws ApiError
     */
    public static searchDocuments(data: EnhancedRagSearchDocumentsData): CancelablePromise<EnhancedRagSearchDocumentsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/rag/search',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Process Document
     * Process a document with enhanced chunking and indexing.
     *
     * Steps:
     * 1. Extract text from document
     * 2. Apply intelligent chunking
     * 3. Generate embeddings
     * 4. Store in vector database
     * 5. Update analytics
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ProcessDocumentResponse Successful Response
     * @throws ApiError
     */
    public static processDocument(data: EnhancedRagProcessDocumentData): CancelablePromise<EnhancedRagProcessDocumentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/rag/documents/process',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reindex Document
     * Reindex an existing document with current configuration.
     *
     * This will:
     * 1. Delete existing chunks from vector database
     * 2. Reprocess the document with current settings
     * 3. Create new embeddings and chunks
     * @param data The data for the request.
     * @param data.documentId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static reindexDocument(data: EnhancedRagReindexDocumentData): CancelablePromise<EnhancedRagReindexDocumentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/rag/documents/{document_id}/reindex',
            path: {
                document_id: data.documentId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Document Index
     * Delete document chunks from the vector index.
     *
     * This removes all chunks and embeddings for the document
     * but keeps the document record intact.
     * @param data The data for the request.
     * @param data.documentId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteDocumentIndex(data: EnhancedRagDeleteDocumentIndexData): CancelablePromise<EnhancedRagDeleteDocumentIndexResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/rag/documents/{document_id}/index',
            path: {
                document_id: data.documentId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Track Result Click
     * Track when a user clicks on a search result.
     *
     * This helps improve search relevance through user feedback
     * and provides analytics on result effectiveness.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static trackResultClick(data: EnhancedRagTrackResultClickData): CancelablePromise<EnhancedRagTrackResultClickResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/rag/analytics/click',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Search Analytics
     * Get search analytics for the current user.
     *
     * Returns:
     * - Total searches performed
     * - Average response time
     * - Click-through rate
     * - Top search queries
     * @param data The data for the request.
     * @param data.days Number of days to analyze
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getSearchAnalytics(data: EnhancedRagGetSearchAnalyticsData = {}): CancelablePromise<EnhancedRagGetSearchAnalyticsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/rag/analytics/search',
            query: {
                days: data.days
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Rag Configuration
     * Get RAG configuration for user or specific AI Soul.
     * @param data The data for the request.
     * @param data.aiSoulId AI Soul ID
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getRagConfiguration(data: EnhancedRagGetRagConfigurationData = {}): CancelablePromise<EnhancedRagGetRagConfigurationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/rag/configuration',
            query: {
                ai_soul_id: data.aiSoulId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Rag Configuration
     * Update RAG configuration for user or specific AI Soul.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static updateRagConfiguration(data: EnhancedRagUpdateRagConfigurationData): CancelablePromise<EnhancedRagUpdateRagConfigurationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/rag/configuration',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * Perform health check on RAG system components.
     *
     * Checks:
     * - Qdrant vector database connectivity
     * - Redis cache availability
     * - OpenAI API connectivity
     * - Database connectivity
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<EnhancedRagHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/rag/health'
        });
    }
    
    /**
     * Get Collection Info
     * Get information about Qdrant collections.
     *
     * Returns collection statistics and status for monitoring.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getCollectionInfo(): CancelablePromise<EnhancedRagGetCollectionInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/rag/collections/info'
        });
    }
    
    /**
     * Get Search Suggestions
     * Get search suggestions based on query prefix.
     *
     * Returns popular queries that start with the given prefix
     * to help users with query completion.
     * @param data The data for the request.
     * @param data.query
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getSearchSuggestions(data: EnhancedRagGetSearchSuggestionsData): CancelablePromise<EnhancedRagGetSearchSuggestionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/rag/suggestions',
            query: {
                query: data.query,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Bulk Process Documents
     * Process multiple documents in bulk.
     *
     * Useful for reprocessing documents after configuration changes
     * or initial setup of large document collections.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.chunkingStrategy
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static bulkProcessDocuments(data: EnhancedRagBulkProcessDocumentsData): CancelablePromise<EnhancedRagBulkProcessDocumentsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/rag/bulk-process',
            query: {
                chunking_strategy: data.chunkingStrategy
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ItemsPublic Successful Response
     * @throws ApiError
     */
    public static readItems(data: ItemsReadItemsData = {}): CancelablePromise<ItemsReadItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item
     * Create new item.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static createItem(data: ItemsCreateItemData): CancelablePromise<ItemsCreateItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/items/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static readItem(data: ItemsReadItemData): CancelablePromise<ItemsReadItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item
     * Update an item.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static updateItem(data: ItemsUpdateItemData): CancelablePromise<ItemsUpdateItemResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItem(data: ItemsDeleteItemData): CancelablePromise<ItemsDeleteItemResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class TrainingService {
    /**
     * Send Training Message
     * Send a training message for an AI soul.
     * Only trainers and admins can send training messages.
     * @param data The data for the request.
     * @param data.aiSoulId
     * @param data.requestBody
     * @returns TrainingMessagePublic Successful Response
     * @throws ApiError
     */
    public static sendTrainingMessage(data: TrainingSendTrainingMessageData): CancelablePromise<TrainingSendTrainingMessageResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/training/{ai_soul_id}/messages',
            path: {
                ai_soul_id: data.aiSoulId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Training Messages
     * Get training messages for an AI soul.
     * Only trainers and admins can view training messages.
     * @param data The data for the request.
     * @param data.aiSoulId
     * @param data.skip
     * @param data.limit
     * @returns TrainingMessagePublic Successful Response
     * @throws ApiError
     */
    public static getTrainingMessages(data: TrainingGetTrainingMessagesData): CancelablePromise<TrainingGetTrainingMessagesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/training/{ai_soul_id}/messages',
            path: {
                ai_soul_id: data.aiSoulId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload Training Document
     * Upload a training document for an AI soul.
     * Only trainers and admins can upload training documents.
     * @param data The data for the request.
     * @param data.aiSoulId
     * @param data.formData
     * @returns TrainingDocumentPublic Successful Response
     * @throws ApiError
     */
    public static uploadTrainingDocument(data: TrainingUploadTrainingDocumentData): CancelablePromise<TrainingUploadTrainingDocumentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/training/{ai_soul_id}/documents',
            path: {
                ai_soul_id: data.aiSoulId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Training Documents
     * Get training documents for an AI soul.
     * Only trainers and admins can view training documents.
     * @param data The data for the request.
     * @param data.aiSoulId
     * @param data.skip
     * @param data.limit
     * @returns TrainingDocumentPublic Successful Response
     * @throws ApiError
     */
    public static getTrainingDocuments(data: TrainingGetTrainingDocumentsData): CancelablePromise<TrainingGetTrainingDocumentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/training/{ai_soul_id}/documents',
            path: {
                ai_soul_id: data.aiSoulId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Training Document
     * Delete a training document.
     * Only trainers and admins can delete training documents.
     * @param data The data for the request.
     * @param data.aiSoulId
     * @param data.documentId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteTrainingDocument(data: TrainingDeleteTrainingDocumentData): CancelablePromise<TrainingDeleteTrainingDocumentResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/training/{ai_soul_id}/documents/{document_id}',
            path: {
                ai_soul_id: data.aiSoulId,
                document_id: data.documentId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Health Check
     * Health check endpoint to verify the service is running.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
    /**
     * Get System Health
     * Get comprehensive system health metrics.
     * Only admins can access system health data.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getSystemHealth(): CancelablePromise<UtilsGetSystemHealthResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/system-health/'
        });
    }
    
}